// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: proto/activity.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ActivityServiceClient is the client API for ActivityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActivityServiceClient interface {
	RegisterUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserResponse, error)
	GetUser(ctx context.Context, in *Name, opts ...grpc.CallOption) (*UserResponse, error)
	UpdateUser(ctx context.Context, in *Name, opts ...grpc.CallOption) (*UserResponse, error)
	AddActivity(ctx context.Context, in *Activity, opts ...grpc.CallOption) (*UserResponse, error)
	ActivityIsDone(ctx context.Context, in *ActivityRequest, opts ...grpc.CallOption) (*Done, error)
	ActivityIsValid(ctx context.Context, in *ActivityRequest, opts ...grpc.CallOption) (*Valid, error)
}

type activityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewActivityServiceClient(cc grpc.ClientConnInterface) ActivityServiceClient {
	return &activityServiceClient{cc}
}

func (c *activityServiceClient) RegisterUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/main.ActivityService/RegisterUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityServiceClient) GetUser(ctx context.Context, in *Name, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/main.ActivityService/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityServiceClient) UpdateUser(ctx context.Context, in *Name, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/main.ActivityService/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityServiceClient) AddActivity(ctx context.Context, in *Activity, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/main.ActivityService/AddActivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityServiceClient) ActivityIsDone(ctx context.Context, in *ActivityRequest, opts ...grpc.CallOption) (*Done, error) {
	out := new(Done)
	err := c.cc.Invoke(ctx, "/main.ActivityService/ActivityIsDone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityServiceClient) ActivityIsValid(ctx context.Context, in *ActivityRequest, opts ...grpc.CallOption) (*Valid, error) {
	out := new(Valid)
	err := c.cc.Invoke(ctx, "/main.ActivityService/ActivityIsValid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActivityServiceServer is the server API for ActivityService service.
// All implementations must embed UnimplementedActivityServiceServer
// for forward compatibility
type ActivityServiceServer interface {
	RegisterUser(context.Context, *User) (*UserResponse, error)
	GetUser(context.Context, *Name) (*UserResponse, error)
	UpdateUser(context.Context, *Name) (*UserResponse, error)
	AddActivity(context.Context, *Activity) (*UserResponse, error)
	ActivityIsDone(context.Context, *ActivityRequest) (*Done, error)
	ActivityIsValid(context.Context, *ActivityRequest) (*Valid, error)
	mustEmbedUnimplementedActivityServiceServer()
}

// UnimplementedActivityServiceServer must be embedded to have forward compatible implementations.
type UnimplementedActivityServiceServer struct {
}

func (UnimplementedActivityServiceServer) RegisterUser(context.Context, *User) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (UnimplementedActivityServiceServer) GetUser(context.Context, *Name) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedActivityServiceServer) UpdateUser(context.Context, *Name) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedActivityServiceServer) AddActivity(context.Context, *Activity) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddActivity not implemented")
}
func (UnimplementedActivityServiceServer) ActivityIsDone(context.Context, *ActivityRequest) (*Done, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivityIsDone not implemented")
}
func (UnimplementedActivityServiceServer) ActivityIsValid(context.Context, *ActivityRequest) (*Valid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivityIsValid not implemented")
}
func (UnimplementedActivityServiceServer) mustEmbedUnimplementedActivityServiceServer() {}

// UnsafeActivityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActivityServiceServer will
// result in compilation errors.
type UnsafeActivityServiceServer interface {
	mustEmbedUnimplementedActivityServiceServer()
}

func RegisterActivityServiceServer(s grpc.ServiceRegistrar, srv ActivityServiceServer) {
	s.RegisterService(&ActivityService_ServiceDesc, srv)
}

func _ActivityService_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServiceServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.ActivityService/RegisterUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServiceServer).RegisterUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Name)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.ActivityService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServiceServer).GetUser(ctx, req.(*Name))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Name)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.ActivityService/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServiceServer).UpdateUser(ctx, req.(*Name))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityService_AddActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Activity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServiceServer).AddActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.ActivityService/AddActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServiceServer).AddActivity(ctx, req.(*Activity))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityService_ActivityIsDone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServiceServer).ActivityIsDone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.ActivityService/ActivityIsDone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServiceServer).ActivityIsDone(ctx, req.(*ActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityService_ActivityIsValid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServiceServer).ActivityIsValid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.ActivityService/ActivityIsValid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServiceServer).ActivityIsValid(ctx, req.(*ActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ActivityService_ServiceDesc is the grpc.ServiceDesc for ActivityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ActivityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.ActivityService",
	HandlerType: (*ActivityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterUser",
			Handler:    _ActivityService_RegisterUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _ActivityService_GetUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _ActivityService_UpdateUser_Handler,
		},
		{
			MethodName: "AddActivity",
			Handler:    _ActivityService_AddActivity_Handler,
		},
		{
			MethodName: "ActivityIsDone",
			Handler:    _ActivityService_ActivityIsDone_Handler,
		},
		{
			MethodName: "ActivityIsValid",
			Handler:    _ActivityService_ActivityIsValid_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/activity.proto",
}
